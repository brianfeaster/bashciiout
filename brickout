#!/bin/bash

# scheduler 0 should work on more recent Bash
# scheduler 1 should work on old Bash / MacOS
scheduler=${1:-0}

# Files used for interprocess communication
IPCFB=/tmp/brickoutfb # shared framebuffer
IPCP1=/tmp/brickoutp1 # commands from player 1

###############################################################################
# Helpers
function p { printf "$@"; }

function sadd { # append to var $1 (should be a string), remaining args
  local IFS=''
  v=$1
  shift
  eval $v=\${$v}'$*'
}

function range { eval echo {$((${2:+$1}+0))..$((${2:-$1-1}))}; }

function arraynew { eval $1="( $( (($3)) && printf "%.s\"$2\" " $(range $3 $4) || printf "\"$2\"" ) )"; }

###############################################################################
# Screen size
ROWS=0
COLS=0

function initScreen {
 local r=$ROWS c=$COLS
 sttysize=($(stty size)) # (ROWS COLUMNS)
 ROWS=${sttysize[0]}
 COLS=${sttysize[1]}
 (( r == ROWS && c == COLS )) # return false if screen size updated
}
while ((!ROWS)) || ((!COLS)); do
  initScreen
done

###############################################################################
# frame buffer
emptyfb=()
emptyfbc=()
fb=()  # frame buffer new/current (starts off empty, is drawn on)
fbo=() # frame buffer old/last (what was lat rendered, current state?)
fbc=() # frame buffer counters

function initfb {
  arraynew emptyfb ' ' $((ROWS*COLS))
  arraynew emptyfbc 0 $((ROWS*COLS))
}
initfb

function clearfb {
  arraynew fbo '${fb[@]}' # Keep track of current framebuffer
  arraynew fb  '${emptyfb[@]}' # new empty framebuffer
  arraynew fbc '${emptyfbc[@]}'
}
clearfb

function fbRender { # Render framebuffer
  local IFS=''
  printf "\e[H${fb[*]}"
  ## Write output to file "log"
  ((p2)) && printf "\e[H${fb[*]}" >> $IPCFB
}

###############################################################################

# running
sadd sprite[0]  '  o' ' /v' '/ \'
sadd sprite[1]  '  O' ' /.' '>| '
sadd sprite[2]  '  O' './ ' '|> '
sadd sprite[3]  '  o' '</ ' '/ \'
sadd sprite[4]  '  O' './ ' '>| '
sadd sprite[5]  '  O' ' /.' '|> '

# jumping
sadd sprite[6]  '  o' ' /v' ' >\'
sadd sprite[7]  '   ' '<-O' '/> '
sadd sprite[8]  '  o' ' /-' '/  '
sadd sprite[9]  '  O' '_/-' '   '
sadd sprite[10] '_-O' '  \' '   '
sadd sprite[11] '--O' '  \' '   '
sadd sprite[12] '--o' '  \' '   '
sadd sprite[13] '-\ ' ' |O' '   '
sadd sprite[14] '-  ' '_\ ' '  O'
sadd sprite[15] ' | ' ' \ ' ' |o'
sadd sprite[16] '  |' ' \/' ' o '
sadd sprite[17] '   ' 'O|/' ' V '
sadd sprite[18] 'O/ ' ' \ ' '  \'
sadd sprite[19] ' o ' ' |-' ' | '
sadd sprite[20] '  O' ' /\' '/> '

# ship
sadd sprite[21] ' **' '  *' '   '
sadd sprite[22] ' * ' '  *' ' * '
sadd sprite[23] '   ' '  *' ' **'
sadd sprite[24] '   ' '* *' ' * '
sadd sprite[25] '   ' '*  ' '** '
sadd sprite[26] ' * ' '*  ' ' * '
sadd sprite[27] '** ' '*  ' '   '
sadd sprite[28] ' * ' '* *' '   '

#numbers
sadd sprite[29] ' _ ' '| |' '|_|'
sadd sprite[30] '   ' ' | ' ' | '
sadd sprite[31] ' _ ' ' _|' '|_ '
sadd sprite[32] ' _ ' ' _|' ' _|'
sadd sprite[33] '   ' '|_|' '  |'
sadd sprite[34] ' _ ' '|_ ' ' _|'
sadd sprite[35] ' _ ' '|_ ' '|_|'
sadd sprite[36] ' _ ' '  /' ' | '
sadd sprite[37] ' _ ' '|_|' '|_|'
sadd sprite[38] ' _ ' '|_|' ' _|'


function spritePlot () { # $1 = cell animation index, $2=y pos, $3=x pos
  local i=0 d s sec=$score
  [[ $sec =~ ${sec//?/(.)} ]]
  for n in ${BASH_REMATCH[@]:1}; do
    d=$((1+i++*3+COLS))
    (( s=n+29 ))
    fb[d++]=${sprite[s]:0:1}
    fb[d++]=${sprite[s]:1:1}
    fb[d++]=${sprite[s]:2:1}
    ((d+=COLS-3))
    fb[d++]=${sprite[s]:3:1}
    fb[d++]=${sprite[s]:4:1}
    fb[d++]=${sprite[s]:5:1}
    ((d+=COLS-3))
    fb[d++]=${sprite[s]:6:1}
    fb[d++]=${sprite[s]:7:1}
    fb[d++]=${sprite[s]:8:1}
  done

  # Draw number of balls
  sec=$((bc-bk))
  i=$((COLS/6))
  [[ $sec =~ ${sec//?/(.)} ]]
  for n in ${BASH_REMATCH[@]:1}; do
    d=$((1+i++*3+COLS))
    (( s=n+29 ))
    fb[d++]=${sprite[s]:0:1}
    fb[d++]=${sprite[s]:1:1}
    fb[d++]=${sprite[s]:2:1}
    ((d+=COLS-3))
    fb[d++]=${sprite[s]:3:1}
    fb[d++]=${sprite[s]:4:1}
    fb[d++]=${sprite[s]:5:1}
    ((d+=COLS-3))
    fb[d++]=${sprite[s]:6:1}
    fb[d++]=${sprite[s]:7:1}
    fb[d++]=${sprite[s]:8:1}
  done

  # hard coded breakout paddle 1
  fb[($2+2)*COLS + $3*2]='\e[1;43m \e[0m'
  fb[($2+2)*COLS + $3*2+1]='\e[1;43m \e[0m'
  fb[($2+2)*COLS + $3*2+2]='\e[1;43m \e[0m'
  fb[($2+2)*COLS + $3*2+3]='\e[1;43m \e[0m'
  fb[($2+2)*COLS + $3*2+4]='\e[1;43m \e[0m'
  fb[($2+2)*COLS + $3*2+5]='\e[1;43m \e[0m'
  fb[($2+2)*COLS + $3*2+6]='\e[1;43m \e[0m'
  fb[($2+2)*COLS + $3*2+7]='\e[1;43m \e[0m'
  fb[($2+2)*COLS + $3*2+8]='\e[1;43m \e[0m'

  # hard coded breakout paddle 1
  if ((p2)); then
    fb[($2+2)*COLS + $4*2]='\e[1;46m \e[0m'
    fb[($2+2)*COLS + $4*2+1]='\e[1;46m \e[0m'
    fb[($2+2)*COLS + $4*2+2]='\e[1;46m \e[0m'
    fb[($2+2)*COLS + $4*2+3]='\e[1;46m \e[0m'
    fb[($2+2)*COLS + $4*2+4]='\e[1;46m \e[0m'
    fb[($2+2)*COLS + $4*2+5]='\e[1;46m \e[0m'
    fb[($2+2)*COLS + $4*2+6]='\e[1;46m \e[0m'
    fb[($2+2)*COLS + $4*2+7]='\e[1;46m \e[0m'
    fb[($2+2)*COLS + $4*2+8]='\e[1;46m \e[0m'
  fi

  # ship
  #d=$((ROWS/2*COLS + COLS/2))
  #s=$((SECONDS%8 + 21))
  #fb[d++]=${sprite[s]:0:1}
  #fb[d++]=${sprite[s]:1:1}
  #fb[d++]=${sprite[s]:2:1}
  #((d+=COLS-3))
  #fb[d++]=${sprite[s]:3:1}
  #fb[d++]=${sprite[s]:4:1}
  #fb[d++]=${sprite[s]:5:1}
  #((d+=COLS-3))
  #fb[d++]=${sprite[s]:6:1}
  #fb[d++]=${sprite[s]:7:1}
  #fb[d++]=${sprite[s]:8:1}
}

# Set newstate in parent environment (variables are dynamic in Bash)
state=0
function aniStateNext {
  case $state in

    (0|1|2|3|4) # normal running just move to next cell
      ((++state)) ;;

    (5) # continue running or jump
      (( state = (RANDOM % 4 ? 0 : 6) )) ;;

    (6|7|8|9|10|11|12|13|14|15|16|17|18|19) # normal jumping
      ((++state)) ;;
    (20) # jump again or run
      (( state = (RANDOM % 2 ? 6 : 0) )) ;;
  esac
}

gnd="**................~.............._..............&..........."

function plotBorder {
  ii=$i
  for x in $( range 0 COLS-1 ); do
    #fb[x]="${gnd:ii++%60:1}"
    fb[x]="\e[44m \e[0m"
  done

  for y in $(range 1 ROWS-1); do
    #fb[COLS*y+COLS-1]="${gnd:ii++%60:1}"
    fb[COLS*y+COLS-1]="\e[44m \e[0m"
  done

  #for x in $( range 1 $((COLS - 1)) ); do
  #  #fb[(ROWS-1)*COLS+COLS-x-1]="${gnd:ii++%60:1}"
  #  fb[(ROWS-1)*COLS+COLS-x-1]="\e[44m \e[0m"
  #done

  for y in $(range 1 $((ROWS-1))); do
    #fb[COLS*(ROWS-y)]="${gnd:ii++%60:1}"
    fb[COLS*(ROWS-y)]="\e[44m \e[0m"
  done
}

p2=0 # player 2 exists?

arraynew pp $((COLS/4-2)) 2 # player position

pd=(0 0) # player direction
i=1 # global tick
power=1
mypid=$$

# ball count
bc=8
# dead balls
bk=0

# ball direction
#arraynew bd '$((RANDOM%%6))' $bc
arraynew bd 1 $bc

# ball alive?
arraynew ba 1 $bc

#ball glyph
arraynew bg '\e[4$((i++%%7+1))m \e[0m' $bc

# ball location
arraynew bx $((COLS/2)) $bc
arraynew by $((ROWS-2)) $bc

# Direction increment lookup tables
byi=(-1 -1 -1   1 1 1)
bxi=( 1  0 -1  -1 0 1)

# Movement cardinal directions.  Adjacent cardinal directions
#  2 1 0                             1
#   \|/                             2+0
#   /|\                              3
#  3 4 5

function newdir { # d: direction  x:loc-x  y:location-y
  # consider existance of obj (cardinal directions) adjacent our location to determine orientation of the object we hit: vertical, horizontal, inside corner, outside corner
  local b0 b1 b2 b3
  [ "${fbo[x+1+(y  )*COLS]}" != " " ]; (( b0=$? ));
  [ "${fbo[x  +(y-1)*COLS]}" != " " ]; (( b1=$? ));
  [ "${fbo[x-1+(y  )*COLS]}" != " " ]; (( b2=$? ));
  [ "${fbo[x  +(y+1)*COLS]}" != " " ]; (( b3=$? ));
  local r='' # accumulate list of possible directions
  # Depending on orientation of the collided "wall", consider all legal new directions.
  case $d in # currently moving in this cardinal directio
    (0) ((b1)) && r="1 2 "
        ((b0)) && r=$r"4 5"
        r=${r:-3} ;;
    (1) r="3 4 5" ;;
    (2) ((b1)) && r="0 1 "
        ((b2)) && r=$r"3 4"
        r=${r:-5} ;;
    (3) ((b2)) && r="1 2 "
        ((b3)) && r=$r"4 5"
        r=${r:-0} ;;
    (4) r="0 1 2" ;;
    (5) ((b0)) && r="0 1 "
        ((b3)) && r=$r"3 4"
        r=${r:-2} ;;
  esac
  r=($r) # list of numbers into array
  p ${r[ RANDOM % ${#r[@]} ]} # pick random element from array
}
#COLS=3
#d=5
#x=0
#y=0
#fbo=("@" "#" " "
#     "#" "#" " "
#     " " " " " ")
#newdir
#exit

function plotBall {
  local i d x y ox oy

  for i in $(range $bc); do
    if (( ba[i] )); then
      d=${bd[i]}
      x=${bx[i]}
      y=${by[i]}
      ox=$x
      oy=$y
      (( x+=bxi[d], y+=byi[d] )) # Consider next position
      if (( y < ROWS )); then
        if [ "${fbo[x+y*COLS]}" != ' ' ]; then
          hitBrick $x $y # Maybe we hit a brick? If so remove it.
          ((x=ox, y=oy)) ; ((d=$(newdir) )) # New direction.  Do actual movement below
        fi
        while  ((ox==x && oy==y)); do
          (( x+=bxi[d], y+=byi[d] ))
          if (( x<=0 || COLS<=x || y<=0 || ROWS<=y )); then
            ((x=ox, y=oy)) ; ((d=$(newdir) )) # Edge of screen
          fi
        done

        if (( y < ROWS )); then
          fb[x+y*COLS]=${bg[i]}
          (( fbc[x+y*COLS]++ ))
          bd[i]=$d
          bx[i]=$x
          by[i]=$y
        else
          (( ba[i]=0, bk++ )) # kill this ball
        fi
      else
        (( ba[i]=0, bk++ )) # kill this ball
      fi
    fi
  done

  for i in $(range $bc); do # Any spot with more than one obj gets a new random direction
    if (( ba[i] )); then
      x=${bx[i]}
      y=${by[i]}
      (( 1 < fbc[x+y*COLS] )) && (( bd[i]=(bd[i]+RANDOM%5)%6))
    fi
  done

}

# bricks loc and dimensions
brx=1
bry=4

brs=3 # size/width of each brick

brh=5
brw=$(( (COLS-2)/brs ))
i=0
arraynew bricks '\e[4$(((i++/brw%%7)+1))m \e[0m' $((brw*brh))
score=0

function plotBricks {
  local i=0 x y s
  for y in $(range $brh); do
    for x in $(range $brw); do
      s=$brs
      while ((s--)); do
        fb[x*brs+brx+s+(y+bry)*COLS]=${bricks[i]}
      done
      ((i++))
    done
  done
}

function hitBrick { # $1=x $2=y  fb location to check and remove
  # index into brick array
  local i=$(( ($1-brx)/brs + ($2-bry)*brw ))
  if (( 0<=i && i<(brh*brw) )) && [ "${bricks[i]}" != ' ' ]; then
    bricks[i]=' '
    ((score+=100000))
  fi
}

###############################################################################
# Star field
sfc=20
arraynew sfx '$((RANDOM %% COLS))' $sfc
arraynew sfy '$((RANDOM %% ROWS))' $sfc
arraynew sfi '$((RANDOM %% 2))' $sfc
sfcm=('\e[34m.' '\e[37m.')

function plotStars {
  local i=$sfc c
  while ((i--)); do
    ((c=sfi[i]))
    (( ROWS <= (sfy[i]+=c+1) )) && ((sfy[i]=0, sfx[i]=RANDOM % COLS))
    fb[sfx[i]+sfy[i]*COLS]="${sfcm[c]}\e[0m"
  done
}

function plotText {
  local x=$1 y=$2 pre=$3 sec=$4 d
  (( d=x+y*COLS ))
  [[ $sec =~ ${sec//?/(.)} ]]
  for n in "${BASH_REMATCH[@]:1}"; do
    fb[d++]="$pre$n\e[0m"
  done
}

function plotGameover {
  (( bc - bk )) && return
  plotText $((COLS/2-8)) $((ROWS/2))   "\e[1m" "Thy Game Is Over"
  plotText $((COLS/2-11)) $((ROWS/2+2)) "\e[0m" "(press 'q' to continue)"
}

framecount=0
function plotFramerate {
  ((framerate = framecount++/SECONDS))
  plotText 0 0 '' "$framerate FPS"
}

##############################################################################*
# The beauty of signal handlers in bash is they are evaluated in the same process as the trap call.

function trapInthandler {
  local key
  ((power)) || return
  ## Player 2
  read -n 1 -u 3 key
  case "$key" in
    (2) p2=1 ;;
    (l) ((pd[1]=-1)) ;;
    (r) ((pd[1]=1)) ;;
  esac
  initScreen || initfb
  clearfb
  plotStars
  plotBorder
  spritePlot $state $((ROWS-4)) ${pp[0]}  ${pp[1]}
  plotBricks # should plot bricks after plotBall as it might remove a brick or two
  plotBall
  plotGameover
  plotFramerate
  fbRender
  if ((pd[0])); then # if direction changed, update player position and clear direction
    ((pp[0]+=pd[0], pd[0]=0))
    #aniStateNext # next animation state
  fi

  if ((pd[1])); then # if direction changed, update player position and clear direction
    ((pp[1]+=pd[1], pd[1]=0))
    #aniStateNext # next animation state
  fi

  ((++i)) # tick the ticker

  if ((scheduler)); then
    # MacOS Bash scheduling
    sleep .02
    kill -s 30 $mypid 2>/dev/null
  fi &  # Reschedule renderer
}
trap trapInthandler 30
###############################################################################
#
# IPC model
#
#   The first process is the 'server' and does all the work.  The others are
#   'clients' and should just send user input and print whatever the server
#   generates.
#
#   Steps:
#
#     * First process is the server
#
#       {p0}
#
#     * Server creates an IPC file for incoming messages.
#
#       {p0}<----[ipc/p0]
#
#     * Second process is a client.  Client creates IPC file for incoming 
#       screen/graphics from the server.
#
#       {p0}<----[ipc/p0]    {p1}
#                [ipc/fb]----^
#
#     * Client opens IPC file to send messages to server
#
#        {p0}<----[ipc/p0]<---{p1}
#                 [ipc/fb]----^
#
#     * Server, once it receives a message from the client,  beings writing to
#       the graphics IPC.
#
#        {p0}<---<[ipc/p0]<--<{p1}
#           v---->[ipc/fb]>---^
#
function server {
  local key
  exec 4>$IPCP1 3<$IPCP1
  p "\e[?25l" # disable cursor
  stty raw -echo
  kill -s 30 $mypid # Scheduler renderer
  while (( power && i < 10000 )); do # number of times to loop
    ## Player 1
    if ((scheduler)); then
      # MacOS Bash scheduling
      read -n 1 -s key
    else
      # Latest Linux Bash scheduling
      read -t .02 -n 1 -s key
      kill -s 30 $mypid 2>/dev/null
    fi
    case "$key" in
      (h|D) ((pd[0]=-1)) ;;
      (l|C) ((pd[0]=1)) ;;
      (q) ((power=0)) ;;
    esac
  done
  p "\e[?25h\e[${ROWS}H" # enable cursor
  stty cooked echo
  rm $IPCP1 $IPCFB 2>/dev/null
  sleep .2
}

function client {
  touch $IPCFB # Create FrameBuffer IPC file for server.
  exec 3>>$IPCP1 # open comm with server
  echo -en 2 >&3 # Announce to server player 2 is here
  p "\e[?25l" # disable cursor
  stty raw -echo
  tail -f $IPCFB & # start rendering the field process
  local key cid=$! # keep track of rendering PID
  while (( power && i < 10000 )); do
    read -n 1 -s key
    case "$key" in
      (h|D) echo -en l >&3 ;;
      (l|C) echo -en r >&3 ;;
      (q) ((power=0)); echo -en q >&3 ;;
    esac
  done
  p "\e[?25h\e[${ROWS}H" # enable cursor
  stty cooked echo
  kill $cid # kill rendering process
}

if [ -f $IPCP1 ]; then
  client
  else
  server
fi
